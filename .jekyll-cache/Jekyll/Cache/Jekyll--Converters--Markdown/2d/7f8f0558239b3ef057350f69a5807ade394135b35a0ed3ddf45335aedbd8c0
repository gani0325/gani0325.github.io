I"<p><span style="border-bottom: 12px solid #dcf1fb; padding: 0 0 0 0.2em;">KAIST 산업및시스템공학과 문일철_ 데이터 구조 및 분석 수업을 참고하여 작성하였습니다</span></p>
<p><span style="border-bottom: 12px solid #dcf1fb; padding: 0 0 0 0.2em;">ch_4_1 Recursions</span></p>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>정의</title>
</head>
<body>

<pre>
</pre>

<p><span style="background: linear-gradient(to right, #ffa7a3, #5673bd); padding: 0.43em 1em; font-size: 19px; border-radius: 3px; color: #ffffff;">Recursions</span></p>

<pre>
1.Recursions (재귀호출)
    - Repating problem
    - Divide and conquer
    - Recursion function call
    - Recursion escape
    - Recursion depth

2. Repeating Problems and Divide Conquer
   - Departments consist of the company
   - Departmenst within departments

3. More examples ...
   - Factorial (팩토리얼)
   - Great common divisor (최대 공약수)
   * commonality
         반복, parameters 감소

4. Recursion
   : A programming method to handle the repeating items in a self-similar way
</pre>
</body>
</html>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">Fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">:</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span><span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span><span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="n">intRet</span> <span class="o">=</span> <span class="n">Fibonacci</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">Fibonacci</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">intRet</span>

<span class="k">for</span> <span class="n">itr</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span> <span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">Fibonacci</span><span class="p">(</span><span class="n">itr</span><span class="p">))</span>
<span class="c1"># 0
# 1
# 1
# 2
# 3
# 5
# 8
# 13
# 21
# 34
</span></code></pre></div></div>

<pre>
5. Recursions and Stackframe
   - Recursion of functions
     - Increase the items in the stackframe
        : Stackframe is a stack (function call history)
        : Push (function is invoked)
        : Pop (function hit return or ends)
     - Local variables and function call parameters
     - R.A : Return Address
</pre>
:ET