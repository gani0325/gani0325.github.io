I"H)<p><span style="border-bottom: 12px solid #dcf1fb; padding: 0 0 0 0.2em;">KAIST 산업및시스템공학과 문일철_ 데이터 구조 및 분석 수업을 참고하여 작성하였습니다</span></p>
<p><span style="border-bottom: 12px solid #dcf1fb; padding: 0 0 0 0.2em;">ch_2_4 Polymorphism and Abstract Class</span></p>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>정의</title>
</head>
<body>

<pre>
</pre>

<p><span style="background: linear-gradient(to right, #ffa7a3, #5673bd); padding: 0.43em 1em; font-size: 19px; border-radius: 3px; color: #ffffff;">Polymorphism and Abstract Class</span></p>
<pre>
1. Polymorphism (다양한 모양)
   - Poly : many
   - Morph : shape
   - Different behaviors with similar signature
   - signature : Method name + Parameter list
   - sub1) Method Overriding
      : Base class has a method num.
      its derived class has a method num.
   - sub2) Method Overloading
      : A class has a method num.
      num, name &amp; num, name, home
</pre>
</body>
</html>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Building</span><span class="p">:</span>
   <span class="n">strAddress</span> <span class="o">=</span> <span class="s">"Daejeon"</span>
   <span class="k">def</span> <span class="nf">openDoor</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Door opened"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Hotel</span> <span class="p">:</span>
   <span class="k">def</span> <span class="nf">openDoor</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Bellboy opens a door"</span><span class="p">)</span>
   <span class="k">def</span> <span class="nf">checkIn</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Someone checks in for 1 day"</span><span class="p">)</span>
   <span class="k">def</span> <span class="nf">checkIn</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">days</span> <span class="o">=</span> <span class="mi">1</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Someone checks in for"</span><span class="p">,</span> <span class="n">days</span><span class="p">,</span> <span class="s">"days"</span><span class="p">)</span>

<span class="n">lotteHotel</span> <span class="o">=</span> <span class="n">Hotel</span><span class="p">()</span>
<span class="n">lotteHotel</span><span class="p">.</span><span class="n">openDoor</span><span class="p">()</span>
<span class="n">lotteHotel</span><span class="p">.</span><span class="n">checkIn</span><span class="p">()</span>
<span class="n">lotteHotel</span><span class="p">.</span><span class="n">checkIn</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="c1"># Bellboy opens a door
# Someone checks in for 1 days
# Someone checks in for 2 days
</span></code></pre></div></div>

<pre>
2. Abstract Class
   - A class with an abstract method
   - What is the abstract method?
      : Method with signature, but with no implementation
   - Abstract class is not a complete
      implementation, it is more like a half-made produce
   - you can't make an instance out of it
   - The concrete class with full implementations and inheriting the abstract class will b a basis for instatnces
</pre>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">abc</span>
<span class="k">class</span> <span class="nc">Room</span><span class="p">(</span><span class="nb">object</span><span class="p">)</span> <span class="p">:</span>
   <span class="n">__metaclass__</span> <span class="o">=</span> <span class="n">abc</span><span class="p">.</span><span class="n">ABCMeta</span>

   <span class="c1"># --&gt; Indicator of abstract base method and class
</span>   <span class="k">def</span> <span class="nf">openDoor</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">pass</span>
   <span class="k">def</span> <span class="nf">oepnWindow</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">pass</span>

<span class="k">class</span> <span class="nc">BedRoom</span><span class="p">(</span><span class="n">Room</span><span class="p">)</span> <span class="p">:</span>
   <span class="k">def</span> <span class="nf">openDoor</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Open bedroom door"</span><span class="p">)</span>
   <span class="k">def</span> <span class="nf">oepnWindow</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Open bedroom window"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Lobby</span><span class="p">(</span><span class="n">Room</span><span class="p">):</span>
   <span class="k">def</span> <span class="nf">openDoor</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Open lobby door"</span><span class="p">)</span>
<span class="n">room1</span> <span class="o">=</span> <span class="n">BedRoom</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">((</span><span class="n">BedRoom</span><span class="p">,</span> <span class="n">Room</span><span class="p">),</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">room1</span><span class="p">,</span> <span class="n">Room</span><span class="p">)))</span>
<span class="n">lobby1</span> <span class="o">=</span> <span class="n">Lobby</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="n">Lobby</span><span class="p">,</span> <span class="n">Room</span><span class="p">),</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">lobby1</span><span class="p">,</span> <span class="n">Room</span><span class="p">))</span>

<span class="c1"># TypeError: issubclass() arg 1 must be a class
</span></code></pre></div></div>

<pre>
3. Overriding Methods in object
   - All of python classes are the descendants of object
   - If you don't specify the base class of your class,
      then your class is the direct derived class of object
   - object has many hidden methods
      : __init__ 
      : __del__
      : __eq__
      : __cmp__
      : __add__
   - override them to make the methods behave as you please
</pre>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Room</span><span class="p">:</span>
   <span class="n">numWidth</span> <span class="o">=</span> <span class="mi">100</span>
   <span class="n">numHeight</span> <span class="o">=</span> <span class="mi">100</span>
   <span class="n">numDepth</span> <span class="o">=</span> <span class="mi">100</span>
   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parWidth</span><span class="p">,</span> <span class="n">parHeight</span><span class="p">,</span> <span class="n">parDepth</span><span class="p">):</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">numDepth</span> <span class="o">=</span> <span class="n">parDepth</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">numWidth</span> <span class="o">=</span> <span class="n">parWidth</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">numHeight</span> <span class="o">=</span> <span class="n">parHeight</span>
   <span class="k">def</span> <span class="nf">getVolumn</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">numDepth</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">numHeight</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">numWidth</span>
   <span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
      <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">Room</span><span class="p">):</span>
         <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">getVolumn</span><span class="p">()</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="n">getVolumn</span><span class="p">():</span>
            <span class="c1"># Duck Typing (막 타이핑)
</span>            <span class="c1"># Easier to Ask for Forgiveness then Permission
</span>            <span class="k">return</span> <span class="bp">True</span>
      <span class="k">return</span> <span class="bp">False</span>
<span class="n">room1</span> <span class="o">=</span> <span class="n">Room</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
<span class="n">room2</span> <span class="o">=</span> <span class="n">Room</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">60</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">room1</span> <span class="o">==</span> <span class="n">room2</span><span class="p">)</span>

<span class="c1">#True
</span></code></pre></div></div>
:ET