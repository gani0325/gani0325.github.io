I"_<p><span style="border-bottom: 12px solid #dcf1fb; padding: 0 0 0 0.2em;">KAIST 산업및시스템공학과 문일철_ 데이터 구조 및 분석 수업을 참고하여 작성하였습니다</span></p>
<p><span style="border-bottom: 12px solid #dcf1fb; padding: 0 0 0 0.2em;">ch_2_3 Encapsulation and Inheritance</span></p>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>정의</title>
</head>
<body>

<pre>
</pre>

<p><span style="background: linear-gradient(to right, #ffa7a3, #5673bd); padding: 0.43em 1em; font-size: 19px; border-radius: 3px; color: #ffffff;">Encapsulation and Inheritance</span></p>
<pre>
1. Encapsulation
  1) Object = Data + Behavior
   - Data : field, member variable, attribute
   - Behavior : method, member function, operation
  2) Delagating the implementation responsibility (구현책임)
  3) Utilizing the visibility
   - private : seen only within the class
   - protected : only within the class &amp; its descendants
   - public : everywhere
  4) Python doens't suppport the visibility options

전체 설계 건축가 &lt;---------class 정의----------&gt; 인테리어 디자이너
구현 구분,, interface as a specifiction

2. Inheritance
   1) Inheritance
    - Giving my attributes to my descendants
    - My attributes = Member variables, Methods
    - My descendants may have new attributes of their own
    - My descendants may mask the received attributes
    - But if not specified, sons follow their father
   2) Superclass
    - My ancestors, like father
    - Generalized from the conceptual view
   3) Subclass
    - My descendants, like son
    - Specialized from the conceptual view
   4) How about having a mother?
    - possible in python

Person
- login()
 ||
 ||
 \/
Customer
- login()
- ID
Employee
- login()

3. Inheritance in Python


</pre>
</body>
</html>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Father</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
   <span class="n">strHometown</span> <span class="o">=</span> <span class="s">"jeju"</span>
   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Father is created"</span><span class="p">)</span>
   <span class="k">def</span> <span class="nf">doFatherThing</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Fahter's actions"</span><span class="p">)</span>
   <span class="k">def</span> <span class="nf">doRunning</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Slow"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Mother</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
   <span class="n">strHometown</span> <span class="o">=</span> <span class="s">"Seoul"</span>
   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Mother is created"</span><span class="p">)</span>
   <span class="k">def</span> <span class="nf">doMotherThing</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Mother's actions"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">obejct</span><span class="p">):</span>
   <span class="n">strName</span> <span class="o">=</span> <span class="s">"Moon"</span>
   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="nb">super</span><span class="p">(</span><span class="n">Child</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Child is created"</span><span class="p">)</span>
   <span class="k">def</span> <span class="nf">doRunning</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Fast"</span><span class="p">)</span>

<span class="n">me</span> <span class="o">=</span> <span class="n">Child</span><span class="p">()</span>
<span class="n">me</span><span class="p">.</span><span class="n">doFatherThing</span><span class="p">()</span>
<span class="n">me</span><span class="p">.</span><span class="n">doMatherThing</span><span class="p">()</span>
<span class="n">me</span><span class="p">.</span><span class="n">doRunning</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">me</span><span class="p">.</span><span class="n">strHometown</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">me</span><span class="p">.</span><span class="n">strName</span><span class="p">)</span>


</code></pre></div></div>
:ET